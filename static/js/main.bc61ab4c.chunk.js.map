{"version":3,"sources":["images/Certificate-01-01.png","logo.svg","certifiacte.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Icon","props","style","backgroundColor","id","xmlns","xmlnsXlink","data-name","viewBox","width","height","transform","xlinkHref","certificateImage","fontFamily","fontSize","opacity","x","y","textAnchor","name","disabled","onClick","saveSvgAsPng","document","getElementById","encoderOptions","App","React","useState","setName","className","type","placeholder","onChange","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,+C,wECA3CD,EAAOC,QAAU,IAA0B,kC,8IC+C5BC,MA3Cf,SAAcC,GAUZ,OACE,yBAAKC,MAAO,CAAEC,gBAAiB,SAC7B,yBACEC,GAAG,UACHC,MAAM,6BACNC,WAAW,+BACXC,YAAU,UACVC,QAAQ,gBAER,2BACEC,MAAM,OACNC,OAAO,OACPC,UAAU,aACVC,UAAWC,MAEb,0BACEC,WAAW,kBACXC,SAAS,KACTC,QAAQ,OACRC,EAAE,MACFC,EAAE,MACFC,WAAW,UAEVlB,EAAMmB,OAGX,4BAAQC,SAAyB,KAAfpB,EAAMmB,KAAaE,QAnCxB,WACfC,uBACEC,SAASC,eAAe,WADd,UAEPxB,EAAMmB,KAFC,qBAGV,CACEM,eAAgB,MA8BlB,uBClBSC,MAlBf,WAAgB,IAAD,EACWC,IAAMC,SAAS,IAD1B,mBACNT,EADM,KACAU,EADA,KAKb,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAaX,KAAMA,IACnB,2BACElB,MAAO,CAAEO,MAAO,MAAOC,OAAQ,OAC/BsB,KAAK,OACLC,YAAY,aACZC,SAVkB,SAACC,GACvBL,EAAQK,EAAMC,OAAOC,YCKLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASC,eAAe,SDyHpB,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc61ab4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Certificate-01-01.79f868fb.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { saveSvgAsPng } from 'save-svg-as-png';\r\nimport certificateImage from './images/Certificate-01-01.png';\r\n\r\nfunction Icon(props) {\r\n  const saveFile = () => {\r\n    saveSvgAsPng(\r\n      document.getElementById('svgCert'),\r\n      `${props.name}_Certificate.jpeg`,\r\n      {\r\n        encoderOptions: 1,\r\n      }\r\n    );\r\n  };\r\n  return (\r\n    <div style={{ backgroundColor: '#fff' }}>\r\n      <svg\r\n        id='svgCert'\r\n        xmlns='http://www.w3.org/2000/svg'\r\n        xmlnsXlink='http://www.w3.org/1999/xlink'\r\n        data-name='Layer 2'\r\n        viewBox='0 0 1063 768'\r\n      >\r\n        <image\r\n          width='2216'\r\n          height='1600'\r\n          transform='scale(.48)'\r\n          xlinkHref={certificateImage}\r\n        ></image>\r\n        <text\r\n          fontFamily='DancingScriptOT'\r\n          fontSize='61'\r\n          opacity='0.47'\r\n          x='50%'\r\n          y='56%'\r\n          textAnchor='middle'\r\n        >\r\n          {props.name}\r\n        </text>\r\n      </svg>\r\n      <button disabled={props.name === ''} onClick={saveFile}>\r\n        Click To Generate\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Icon;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Certificate from './certifiacte';\nfunction App() {\n  const [name, setName] = React.useState('');\n  const onChangeHandler = (event) => {\n    setName(event.target.value);\n  };\n  return (\n    <div className='App'>\n      <Certificate name={name} />\n      <input\n        style={{ width: '20%', height: '30%' }}\n        type='text'\n        placeholder='Enter Name'\n        onChange={onChangeHandler}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}